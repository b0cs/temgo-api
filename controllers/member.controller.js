import Member from "../models/member.model.js";
import ClientClusterRelation from "../models/ClientClusterRelation.js";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import Cluster from "../models/cluster.model.js";
import Appointment from "../models/appointment.model.js";
import mongoose from "mongoose";
import Service from "../models/service.model.js";
import User from "../models/user.model.js";
// Need to add security in every controllers to check if the user is authorized to do the action
// Plus security from input data


dotenv.config();
export const createMember = async (req, res) => {
    const { firstName, lastName, email, phone, passwordHash, role, cluster, preferences, confirmed } = req.body;
    
    console.log("üîç Tentative de cr√©ation d'un membre avec les donn√©es:", {
        firstName, lastName, email, phone, cluster
    });
    
    // Validation des donn√©es
    if (!firstName || !lastName) {
        console.log("‚ùå Erreur: Le pr√©nom et le nom sont requis");
        return res.status(400).json({ message: "Le pr√©nom et le nom sont requis" });
    }
    
    if (phone && typeof phone !== 'string') {
        console.log("‚ùå Erreur: Le num√©ro de t√©l√©phone doit √™tre une cha√Æne de caract√®res");
        return res.status(400).json({ message: "Le num√©ro de t√©l√©phone doit √™tre une cha√Æne de caract√®res" });
    }
    
    if (!cluster) {
        console.log("‚ùå Erreur: L'ID du cluster est requis");
        return res.status(400).json({ message: "L'ID du cluster est requis" });
    }
    
    try {
        // V√©rifier si un membre avec cet email existe d√©j√†
        let existingMember = null;
        
        if (email) {
            existingMember = await Member.findOne({ email });
            if (existingMember) {
                console.log(`‚ùå Un membre avec l'email ${email} existe d√©j√†`);
                
                // V√©rifier si une relation existe d√©j√† avec ce cluster
                const existingRelation = await ClientClusterRelation.findOne({
                    clientId: existingMember._id,
                    clusterId: cluster
                });
                
                if (existingRelation) {
                    if (!existingRelation.isActive) {
                        // R√©activer la relation si elle √©tait d√©sactiv√©e
                        existingRelation.isActive = true;
                        await existingRelation.save();
                        return res.status(200).json({ 
                            message: "Client r√©activ√© dans cet √©tablissement",
                            member: existingMember,
                            relation: existingRelation
                        });
                    }
                    return res.status(409).json({ 
                        message: "Ce client est d√©j√† associ√© √† cet √©tablissement",
                        memberId: existingMember._id,
                        memberInfo: {
                            firstName: existingMember.firstName,
                            lastName: existingMember.lastName,
                            email: existingMember.email,
                            phone: existingMember.phone
                        }
                    });
                }
                
                // Si le client existe mais avec un flag confirm√© absent, c'est une d√©couverte et non une confirmation
                if (!confirmed) {
                    // Renvoyer les informations du client existant et demander une confirmation
                    return res.status(428).json({
                        message: "Un client avec cet email existe d√©j√†. S'agit-il du m√™me client ?",
                        existingMember: {
                            id: existingMember._id,
                            firstName: existingMember.firstName,
                            lastName: existingMember.lastName,
                            email: existingMember.email,
                            phone: existingMember.phone
                        },
                        requiresConfirmation: true,
                        action: "confirm_existing_member"
                    });
                }
            }
        }
        
        // V√©rifier si un membre avec ce num√©ro de t√©l√©phone existe d√©j√†
        if (!existingMember && phone) {
            const existingMemberByPhone = await Member.findOne({ phone });
            if (existingMemberByPhone) {
                console.log(`‚ùå Un membre avec le num√©ro de t√©l√©phone ${phone} existe d√©j√†`);
                
                // V√©rifier si une relation existe d√©j√†
                const existingRelation = await ClientClusterRelation.findOne({
                    clientId: existingMemberByPhone._id,
                    clusterId: cluster
                });
                
                if (existingRelation) {
                    if (!existingRelation.isActive) {
                        // R√©activer la relation si elle √©tait d√©sactiv√©e
                        existingRelation.isActive = true;
                        await existingRelation.save();
                        return res.status(200).json({ 
                            message: "Client r√©activ√© dans cet √©tablissement",
                            member: existingMemberByPhone,
                            relation: existingRelation
                        });
                    }
                    return res.status(409).json({ 
                        message: "Ce client est d√©j√† associ√© √† cet √©tablissement",
                        memberId: existingMemberByPhone._id,
                        memberInfo: {
                            firstName: existingMemberByPhone.firstName,
                            lastName: existingMemberByPhone.lastName,
                            email: existingMemberByPhone.email,
                            phone: existingMemberByPhone.phone
                        }
                    });
                }
                
                // Si le client existe mais avec un flag confirm√© absent, c'est une d√©couverte et non une confirmation
                if (!confirmed) {
                    // Renvoyer les informations du client existant et demander une confirmation
                    return res.status(428).json({
                        message: "Un client avec ce num√©ro de t√©l√©phone existe d√©j√†. S'agit-il du m√™me client ?",
                        existingMember: {
                            id: existingMemberByPhone._id,
                            firstName: existingMemberByPhone.firstName,
                            lastName: existingMemberByPhone.lastName,
                            email: existingMemberByPhone.email,
                            phone: existingMemberByPhone.phone
                        },
                        requiresConfirmation: true,
                        action: "confirm_existing_member"
                    });
                }
                
                // Si on arrive ici, c'est que l'utilisateur a confirm√© qu'il s'agit du m√™me client,
                // donc on va le r√©utiliser
                existingMember = existingMemberByPhone;
            }
        }
        
        // Traiter le cas o√π un client existant est confirm√©
        if (existingMember && confirmed) {
            console.log(`‚úÖ R√©utilisation du client existant avec ID: ${existingMember._id}`);
            
            // Cr√©er une nouvelle relation pour ce client avec le cluster actuel
            const newRelation = new ClientClusterRelation({
                clientId: existingMember._id,
                clusterId: cluster,
                preferences: preferences || '',
                joinedAt: new Date(),
                isActive: true
            });
            
            await newRelation.save();
            console.log("‚úÖ Relation cr√©√©e pour le client existant dans le nouvel √©tablissement");
            
            return res.status(201).json({
                message: "Client existant ajout√© √† l'√©tablissement",
                member: existingMember,
                relation: newRelation
            });
        }
        
        // Si on arrive ici, c'est qu'on doit cr√©er un nouveau client
        
        // Utiliser un mot de passe par d√©faut si non fourni
        const defaultPasswordHash = passwordHash || 'defaultPassword';
        
        const newMember = new Member({
            firstName,
            lastName,
            email: email || `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`,
            phone,
            passwordHash: defaultPasswordHash,
            role: role || 'client',
            // Cluster est maintenant facultatif, car le client peut appartenir √† plusieurs clusters
            // Le conserver pour la r√©trocompatibilit√©
            cluster
        });

        console.log("‚úÖ Tentative de sauvegarde du nouveau membre");
        const savedMember = await newMember.save();
        console.log("‚úÖ Membre cr√©√© avec succ√®s:", savedMember._id);
        
        // Si c'est un client, cr√©er √©galement une relation avec le cluster
        if (savedMember.role === 'client') {
            const newRelation = new ClientClusterRelation({
                clientId: savedMember._id,
                clusterId: cluster,
                preferences: preferences || '',
                joinedAt: new Date(),
                isActive: true
            });
            
            await newRelation.save();
            console.log("‚úÖ Relation client-cluster cr√©√©e avec succ√®s");
            
            return res.status(201).json({
                message: "Nouveau client cr√©√© et ajout√© √† l'√©tablissement",
                member: savedMember,
                relation: newRelation
            });
        }
   
        res.status(201).json({
            message: "Membre cr√©√© avec succ√®s",
            member: savedMember
        });
    } catch (error) {
        console.log("‚ùå Erreur lors de la cr√©ation du membre:", error.message);
        res.status(400).json({ message: error.message });
    }
}

export const getMembersByCluster = async (req, res) => {
  try {
    const { clusterId } = req.params;
    
    console.log(`üîç Recherche des membres du cluster ${clusterId}`);
    
    if (!mongoose.Types.ObjectId.isValid(clusterId)) {
      return res.status(400).json({ message: 'ID de cluster invalide' });
    }
    
    // Requ√™te simple pour r√©cup√©rer TOUS les membres du cluster, y compris les bannis
    // Ne pas filtrer sur le statut pour r√©cup√©rer √† la fois les membres actifs et bannis
    const members = await Member.find({ 
      cluster: clusterId,
      role: 'client',
    });
    
    console.log(`‚úÖ ${members.length} membres trouv√©s pour le cluster ${clusterId}`);
    
    res.status(200).json(members);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration des membres: ${error.message}`);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des membres', error: error.message });
  }
};

export const getMemberById = async (req, res) => {
    const { memberId } = req.params;  

    try {
        const member = await Member.findById(memberId);
        res.status(200).json(member);
    } catch (error) {
        res.status(404).json({ message: error.message });
    }
};

export const updateMemberSchedule = async (req, res) => {
    const { memberId } = req.params;
    const { schedule } = req.body;
  
    try {
      const member = await Member.findByIdAndUpdate(memberId, {
        $set: { schedule: schedule }
      }, { new: true });
  
      if (!member) {
        return res.status(404).json({ message: "Member not found" });
      }
      res.status(200).json(member);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  };
  

  export const getScheduleForPeriod = async (req, res) => {
    const { memberId } = req.params;
    const { startDate, duration } = req.query; // startDate=2023-01-01&duration=7 for one week
  
    try {
      const endDate = new Date(startDate);
      endDate.setDate(endDate.getDate() + parseInt(duration));
  
      const schedule = await Member.findOne({
        _id: memberId,
        'schedule.date': { $gte: new Date(startDate), $lt: endDate }
      }).select('schedule.$');
  
      if (!schedule) {
        return res.status(404).json({ message: "No schedule found for this period" });
      }
      res.status(200).json(schedule);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  };
  

  export const loginMember = async (req, res) => {
    const { email, password } = req.body;

    try {
        const member = await Member.findOne({ email });
        if (!member) {
            return res.status(404).json({ message: "No member found with this email" });
        }

        member.checkPassword(password, async (error, result) => {
            if (error) {
                return res.status(403).json({ message: error.message });
            }
            if (!result) {
                return res.status(401).json({ message: 'Invalid password or account locked.' });
            }
           
        });

         // TODO: Generate a token and send it as a response instead of memberId
            
         const tokenId = await jwt.sign({ id: member._id }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXPIRATION })
      
      res.status(200).json({ message: "Login successful", token: tokenId});
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

export const addMemberAbsence = async (req, res) => {
  const { memberId } = req.params;
  const { startDate, endDate } = req.body;

  try {
      const member = await Member.findById(memberId);
      if (!member) {
          return res.status(404).json({ message: "Member not found" });
      }

      // Convertir les dates en objets Date
      const start = new Date(startDate);
      const end = new Date(endDate);

      // V√©rifier s'il existe un chevauchement avec les absences existantes
      const overlap = member.absences.some(absence => {
          const absStart = new Date(absence.startDate);
          const absEnd = new Date(absence.endDate);
          return (start <= absEnd && end >= absStart);
      });

      if (overlap) {
          return res.status(400).json({ message: "The requested absence period overlaps with an existing absence." });
      }

      // V√©rifier si des rendez-vous sont pr√©vus pendant cette p√©riode
      // Note: Assurez-vous que vous avez un mod√®le ou une m√©thode pour r√©cup√©rer les rendez-vous d'un membre
      const appointments = await Appointment.find({
          memberId: memberId,
          date: { $gte: start, $lte: end }
      });

      if (appointments.length > 0) {
          return res.status(400).json({ message: "There are scheduled appointments during this absence period. Please reschedule or cancel them before setting the absence." });
      }

      // Ajouter la p√©riode d'absence
      member.absences.push({ startDate: start, endDate: end });
      await member.save();

      res.status(200).json({ message: "Absence added successfully", absences: member.absences });
  } catch (error) {
      res.status(500).json({ message: error.message });
  }
};

export const getAllMembersByCluster = async (req, res) => {
    const { clusterId } = req.params;
    const { status } = req.query;
    
    console.log("üîç Recherche de tous les membres pour le cluster:", clusterId, "avec le statut:", status);
    
    try {
        // V√©rifier d'abord si on doit utiliser les relations many-to-many
        const relationsExist = await ClientClusterRelation.exists({ clusterId: clusterId });
        
        if (relationsExist) {
            console.log("üîÑ Utilisation des relations client-cluster (many-to-many)");
            
            // Chercher les relations pour ce cluster
            const relations = await ClientClusterRelation.find({ clusterId: clusterId })
                .populate({
                    path: 'clientId',
                    select: 'firstName lastName email phone status',
                    match: status ? { status } : { status: { $nin: ['deleted', 'banned'] } } // Exclure les clients supprim√©s ET bannis par d√©faut
                })
                .sort({ updatedAt: -1 });
            
            // Filtrer les relations dont le client a √©t√© supprim√© ou est null
            const validRelations = relations.filter(relation => relation.clientId !== null);
            
            // Transformer la r√©ponse pour inclure les informations du client directement
            const formattedRelations = validRelations.map(relation => {
                const client = relation.clientId;
                return {
                    _id: relation._id,
                    clientId: relation.clientId._id,
                    firstName: client.firstName,
                    lastName: client.lastName,
                    email: client.email,
                    phone: client.phone,
                    status: client.status,
                    relationId: relation._id,
                    joinedAt: relation.joinedAt,
                    lastVisit: relation.lastVisit,
                    totalSpent: relation.totalSpent,
                    visitsCount: relation.visitsCount,
                    preferences: relation.preferences || client.notes
                };
            });
            
            console.log(`‚úÖ ${formattedRelations.length} clients trouv√©s via les relations`);
            return res.status(200).json(formattedRelations);
        }
        
        const query = { cluster: clusterId };
        if (status) {
            query.status = status;
        } else {
            // Par d√©faut, ne pas inclure les clients supprim√©s ou bannis
            query.status = { $nin: ['deleted', 'banned'] };
        }
        
        // Chercher dans la collection members
        const members = await Member.find(query);
        
        // Chercher dans la collection users
        const users = await mongoose.connection.db.collection('users').find({
            cluster: new mongoose.Types.ObjectId(clusterId),
            role: 'client',
            ...(status ? { status } : { status: { $nin: ['deleted', 'banned'] } })
        }).toArray();
        
        // Chercher dans la collection clients
        const clients = await mongoose.connection.db.collection('clients').find({
            cluster: new mongoose.Types.ObjectId(clusterId),
            ...(status ? { status } : { status: { $nin: ['deleted', 'banned'] } })
        }).toArray();
        
        // Fusionner les r√©sultats
        const allMembers = [...members, ...users, ...clients];
        console.log(`‚úÖ ${allMembers.length} membres trouv√©s au total`);
        
        res.status(200).json(allMembers);
    } catch (error) {
        console.error("‚ùå Erreur lors de la recherche des membres:", error);
        res.status(404).json({ message: error.message });
    }
};

export const createAppointment = async (req, res) => {
  try {
    const { memberId, serviceId, startTime, clusterId, employeeId, peopleCount } = req.body;
    
    // V√©rifier que tous les champs requis sont pr√©sents
    if (!memberId || !serviceId || !startTime || !clusterId) {
      return res.status(400).json({ message: 'Tous les champs requis doivent √™tre renseign√©s' });
    }

    // V√©rifier si le membre existe
    const member = await Member.findById(memberId);
    if (!member) {
      return res.status(404).json({ message: 'Membre non trouv√©' });
    }
    
    // V√©rifier si le membre est banni globalement
    if (member.status === 'banned') {
      console.log(`üö´ Tentative de rendez-vous pour membre banni globalement: ${memberId}`);
      return res.status(403).json({ 
        message: 'Ce membre est banni et ne peut pas prendre de rendez-vous',
        memberStatus: 'banned'
      });
    }

    // V√©rifier si le client est banni sp√©cifiquement dans ce cluster
    const clientClusterRelation = await mongoose.model('ClientClusterRelation').findOne({
      clientId: memberId,
      clusterId: clusterId
    });
    
    if (clientClusterRelation && 
        (!clientClusterRelation.isActive && 
         clientClusterRelation.preferences && 
         clientClusterRelation.preferences.banned)) {
      console.log(`üö´ Tentative de rendez-vous pour membre banni dans ce cluster: ${memberId}`);
      return res.status(403).json({ 
        message: 'Ce membre est banni dans cet √©tablissement et ne peut pas prendre de rendez-vous',
        memberStatus: 'banned_in_cluster'
      });
    }

    // V√©rifier si le service existe
    const service = await Service.findById(serviceId);
    if (!service) {
      return res.status(404).json({ message: 'Service non trouv√©' });
    }

    // V√©rifier si le cluster existe
    const cluster = await Cluster.findById(clusterId);
    if (!cluster) {
      return res.status(404).json({ message: 'Cluster non trouv√©' });
    }
    
    // V√©rifier si le client a une relation avec ce cluster
    const hasRelation = await ClientClusterRelation.findOne({ 
      clientId: memberId, 
      clusterId: clusterId 
    });
    
    // Si le membre est un client et qu'il n'a pas de relation avec ce cluster, cr√©er une relation
    if (member.role === 'client' && !hasRelation) {
      const newRelation = new ClientClusterRelation({
        clientId: memberId,
        clusterId: clusterId,
        joinedAt: new Date()
      });
      
      await newRelation.save();
      console.log(`‚úÖ Relation client-cluster cr√©√©e automatiquement lors de la prise de rendez-vous`);
    }

    // V√©rifier les conflits si un employ√© est sp√©cifi√©
    if (employeeId) {
      const employee = await User.findById(employeeId);
      if (!employee) {
        return res.status(404).json({ message: 'Employ√© non trouv√©' });
      }

      // V√©rifier s'il y a des rendez-vous existants pour cet employ√© √† ce moment
      const conflictingAppointments = await Appointment.find({
        employee: employeeId,
        startTime: { $lte: new Date(startTime) },
        endTime: { $gte: new Date(startTime) },
        status: { $nin: ['cancelled', 'completed'] }
      });

      if (conflictingAppointments.length > 0) {
        return res.status(409).json({
          message: 'Cet employ√© a d√©j√† un rendez-vous pr√©vu √† ce moment',
          conflicts: conflictingAppointments
        });
      }
    }

    // Calcul de la date de fin bas√©e sur la dur√©e du service
    const startTimeDate = new Date(startTime);
    const endTimeDate = new Date(startTimeDate.getTime() + service.duration * 60000);

    // Cr√©er le nouveau rendez-vous
    const newAppointment = new Appointment({
      member: memberId,
      service: serviceId,
      cluster: clusterId,
      startTime: startTimeDate,
      endTime: endTimeDate,
      status: 'scheduled',
      peopleCount: peopleCount || 1
    });

    // Assigner un employ√© si sp√©cifi√©
    if (employeeId) {
      newAppointment.employee = employeeId;
    }

    // Sauvegarder le rendez-vous
    await newAppointment.save();

    // R√©cup√©rer le rendez-vous avec les d√©tails du membre, du service et de l'employ√©
    const populatedAppointment = await Appointment.findById(newAppointment._id)
      .populate('member', 'firstName lastName email')
      .populate('service', 'name price duration')
      .populate('employee', 'firstName lastName')
      .populate('cluster', 'name');

    res.status(201).json({
      message: 'Rendez-vous cr√©√© avec succ√®s',
      appointment: populatedAppointment
    });
  } catch (error) {
    console.error('Erreur lors de la cr√©ation du rendez-vous:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// Supprimer un client (soft delete)
export const deleteMember = async (req, res) => {
  try {
    const { memberId } = req.params;
    
    console.log(`üîç Tentative de suppression du membre ${memberId}`);
    
    // V√©rifier si l'ID est valide
    if (!mongoose.Types.ObjectId.isValid(memberId)) {
      console.log(`‚ùå ID invalide: ${memberId}`);
      return res.status(400).json({ message: 'ID de membre invalide' });
    }
    
    // Chercher le membre dans toutes les collections
    let member = await Member.findById(memberId);
    
    if (!member) {
      // Essayer dans la collection users
      member = await mongoose.connection.db.collection('users').findOne({ 
        _id: new mongoose.Types.ObjectId(memberId),
        role: 'client'
      });
    }
    
    if (!member) {
      // Essayer dans la collection clients
      member = await mongoose.connection.db.collection('clients').findOne({ 
        _id: new mongoose.Types.ObjectId(memberId)
      });
    }
    
    if (!member) {
      console.log(`‚ùå Membre non trouv√© dans aucune collection: ${memberId}`);
      return res.status(404).json({ message: 'Membre non trouv√©' });
    }

    console.log(`‚úÖ Membre trouv√©: ${member.firstName} ${member.lastName}`);

    // V√©rifier les rendez-vous futurs
    const futureAppointments = await Appointment.find({
      member: memberId,
      startTime: { $gte: new Date() }
    }).populate('service', 'name');

    console.log(`üìÖ Nombre de rendez-vous futurs trouv√©s: ${futureAppointments.length}`);

    if (futureAppointments.length > 0) {
      console.log(`‚ö†Ô∏è Rendez-vous √† venir trouv√©s pour le membre ${memberId}`);
      return res.status(400).json({
        message: 'Impossible de supprimer ce client car il a des rendez-vous √† venir',
        appointments: futureAppointments.map(app => ({
          id: app._id,
          date: app.startTime,
          service: app.service ? app.service.name : 'Service inconnu'
        }))
      });
    }

    // Anonymiser les donn√©es
    const anonymizedData = {
      firstName: `Client_${member._id.toString().substring(0, 6)}`,
      lastName: 'Supprim√©',
      email: `deleted_${member._id}@temgo.com`,
      phone: `deleted_${member._id}`
    };

    // Mettre √† jour le membre dans la collection appropri√©e
    if (member instanceof Member) {
      member.status = 'deleted';
      member.deletedAt = new Date();
      member.anonymizedData = anonymizedData;
      member.firstName = anonymizedData.firstName;
      member.lastName = anonymizedData.lastName;
      member.email = anonymizedData.email;
      member.phone = anonymizedData.phone;
      await member.save();
    } else {
      // Pour les autres collections, utiliser updateOne avec le nom de la collection
      const collectionName = member.constructor.modelName === 'User' ? 'users' : 'clients';
      await mongoose.connection.db.collection(collectionName).updateOne(
        { _id: member._id },
        {
          $set: {
            status: 'deleted',
            deletedAt: new Date(),
            anonymizedData,
            firstName: anonymizedData.firstName,
            lastName: anonymizedData.lastName,
            email: anonymizedData.email,
            phone: anonymizedData.phone
          }
        }
      );
    }

    console.log(`‚úÖ Membre ${memberId} supprim√© avec succ√®s`);

    res.status(200).json({
      message: 'Client supprim√© avec succ√®s',
      member: {
        id: member._id,
        status: 'deleted',
        deletedAt: new Date()
      }
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du client:', error);
    res.status(500).json({ message: 'Erreur lors de la suppression du client' });
  }
};

// R√©cup√©rer les clients supprim√©s d'un cluster
export const getDeletedClientsByCluster = async (req, res) => {
  try {
    const { clusterId } = req.params;
    
    console.log('üîç getDeletedClientsByCluster - Request params:', { clusterId });
    
    if (!mongoose.Types.ObjectId.isValid(clusterId)) {
      return res.status(400).json({ message: 'ID d\'√©tablissement invalide' });
    }

    console.time('getDeletedClientsByCluster');

    // R√©cup√©rer les membres supprim√©s li√©s √† ce cluster
    const deletedMembers = await Member.find({
      cluster: new mongoose.Types.ObjectId(clusterId),
      status: 'deleted',
      role: 'client'
    }).select('_id firstName lastName email phone status deletedAt anonymizedData');

    console.timeEnd('getDeletedClientsByCluster');
    console.log(`‚úÖ R√©cup√©r√© ${deletedMembers.length} clients supprim√©s dans le cluster ${clusterId}`);

    // Si nous avons trouv√© des clients supprim√©s, les retourner
    if (deletedMembers.length > 0) {
      // D√©tails des clients supprim√©s pour d√©bogage
      deletedMembers.forEach(member => {
        console.log(`- Client supprim√©: ${member.firstName} ${member.lastName} (${member._id})`);
        console.log(`  Email: ${member.email}, T√©l: ${member.phone}`);
        console.log(`  Supprim√© le: ${member.deletedAt}`);
      });
    } else {
      console.log('‚úÖ Aucun client supprim√© trouv√© dans ce cluster');
    }

    return res.status(200).json(deletedMembers);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des clients supprim√©s:', error);
    return res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};