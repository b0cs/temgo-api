// Script pour migrer les champs client/cluster vers clientId/clusterId dans les relations client-cluster
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import path from 'path';

// Obtenir le chemin du fichier actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Chargement des variables d'environnement
dotenv.config();

// URL de connexion MongoDB depuis les variables d'environnement
const MONGODB_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/temgo';

// D√©finition du sch√©ma pour Member (client)
const memberSchema = new mongoose.Schema({
  firstName: String,
  lastName: String,
  email: String,
  phone: String,
  passwordHash: String,
  role: String,
  cluster: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Cluster'
  },
  isActive: Boolean,
  status: String
}, { timestamps: true });

// D√©finition du sch√©ma pour la collection ClientClusterRelation
const clientClusterRelationSchema = new mongoose.Schema(
  {
    // Anciens champs
    client: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Member'
    },
    cluster: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Cluster'
    },
    // Nouveaux champs
    clientId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Member'
    },
    clusterId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Cluster'
    },
    isActive: {
      type: Boolean,
      default: true
    },
    preferences: {
      preferredStylists: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Staff'
      }],
      preferredTreatments: [String],
      notes: String
    },
    lastVisit: {
      type: Date,
      default: null
    }
  },
  { timestamps: true }
);

// Cr√©ation des mod√®les
const Member = mongoose.model('Member', memberSchema);
const ClientClusterRelation = mongoose.model('ClientClusterRelation', clientClusterRelationSchema);

// Fonction principale pour effectuer la migration
async function migrateFields() {
  console.log('üîÑ D√©but de la migration des champs client/cluster vers clientId/clusterId...');
  
  try {
    // Connexion √† la base de donn√©es
    await mongoose.connect(MONGODB_URI);
    console.log(`MongoDB connect√©: ${mongoose.connection.host}`);
    
    // PARTIE 1: Migration des relations existantes
    console.log('üìä PARTIE 1: Migration des relations existantes');
    
    // Trouver toutes les relations qui ont les anciens champs mais pas les nouveaux
    const relations = await ClientClusterRelation.find({
      $or: [
        { client: { $exists: true }, clientId: { $exists: false } },
        { cluster: { $exists: true }, clusterId: { $exists: false } }
      ]
    });
    
    console.log(`  ‚úÖ ${relations.length} relations trouv√©es avec les anciens champs`);
    
    // Compteurs pour le suivi
    let updatedRelations = 0;
    let relationErrors = 0;
    
    // Mise √† jour de chaque relation
    for (const relation of relations) {
      try {
        // Copier les valeurs des anciens champs vers les nouveaux
        if (relation.client && !relation.clientId) {
          relation.clientId = relation.client;
        }
        if (relation.cluster && !relation.clusterId) {
          relation.clusterId = relation.cluster;
        }
        
        // Sauvegarder les modifications
        await relation.save();
        updatedRelations++;
      } catch (error) {
        console.error(`  ‚ùå Erreur lors de la mise √† jour de la relation ${relation._id}:`, error);
        relationErrors++;
      }
    }
    
    console.log(`  ‚úÖ Migration partie 1 termin√©e: ${updatedRelations} relations mises √† jour, ${relationErrors} erreurs`);
    
    // PARTIE 2: Cr√©ation de relations pour les clients existants
    console.log('üìä PARTIE 2: Cr√©ation de relations pour les clients existants');
    
    // Trouver tous les clients qui ont un cluster mais pas de relation
    const clients = await Member.find({
      role: 'client',
      cluster: { $exists: true, $ne: null },
      status: { $ne: 'deleted' } // Exclure les clients supprim√©s
    }).lean();
    
    console.log(`  ‚úÖ ${clients.length} clients trouv√©s avec un cluster`);
    
    // Compteurs pour le suivi
    let createdRelations = 0;
    let clientErrors = 0;
    let skippedClients = 0;
    
    // Pour chaque client, v√©rifier s'il a d√©j√† une relation et en cr√©er une si n√©cessaire
    for (const client of clients) {
      try {
        // V√©rifier si une relation existe d√©j√† pour ce client et ce cluster
        const existingRelation = await ClientClusterRelation.findOne({
          $or: [
            { client: client._id, cluster: client.cluster },
            { clientId: client._id, clusterId: client.cluster }
          ]
        });
        
        if (existingRelation) {
          skippedClients++;
          continue; // Passer au client suivant
        }
        
        // Cr√©er une nouvelle relation
        const newRelation = new ClientClusterRelation({
          clientId: client._id,
          clusterId: client.cluster,
          isActive: true,
          preferences: {
            preferredStylists: [],
            preferredTreatments: [],
            notes: ''
          }
        });
        
        await newRelation.save();
        createdRelations++;
        
        console.log(`  ‚úÖ Relation cr√©√©e pour le client ${client.firstName} ${client.lastName} (${client._id})`);
      } catch (error) {
        console.error(`  ‚ùå Erreur lors de la cr√©ation de la relation pour le client ${client._id}:`, error);
        clientErrors++;
      }
    }
    
    console.log(`  ‚úÖ Migration partie 2 termin√©e: ${createdRelations} relations cr√©√©es, ${skippedClients} clients ignor√©s, ${clientErrors} erreurs`);
    console.log('üéâ Migration compl√®te termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    // D√©connexion de la base de donn√©es
    console.log('üì° D√©connect√© de MongoDB');
    await mongoose.disconnect();
  }
}

// Ex√©cuter la migration
migrateFields(); 